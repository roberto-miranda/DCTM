#!/bin/sh
echo USAGE : ./configure_stateless_da
DFC_PROPERTIES_FILE=/opt/tomcat/webapps/da/WEB-INF/classes/dfc.properties
> $DFC_PROPERTIES_FILE
if [[ $KUBERNETES == "" ||  $KUBERNETES == "false" ]]
then
	echo "dfc.docbroker.host[0]=$DOCBROKER_IP" >> $DFC_PROPERTIES_FILE
	echo "dfc.docbroker.port[0]=$DOCBROKER_PORT" >> $DFC_PROPERTIES_FILE	
	echo "dfc.crypto.repository=$CRYPTO_REGISTRY_DOCBASE_NAME" >> $DFC_PROPERTIES_FILE
	echo "dfc.session.secure_connect_default=$DFC_SESSION_SECURE_CONNECT_DEFAULT" >> $DFC_PROPERTIES_FILE
	echo "dfc.globalregistry.repository=$GLOBAL_REGISTRY_DOCBASE_NAME" >> $DFC_PROPERTIES_FILE
	echo "dfc.globalregistry.username=dm_bof_registry" >> $DFC_PROPERTIES_FILE
	echo "dfc.globalregistry.password=$BOF_REGISTRY_USER_PASSWORD" >> $DFC_PROPERTIES_FILE
fi;

echo "Encrypting presets and preferences user password and setting it in wdk/app.xml"
cd /opt/da_build/
eval "./encryptPasswordUpdate.pl"

if [[ "$OTDS_ENABLED" == "true" ]] 
then
    echo "OTDS is enabled"
	eval "./updateOtdsProperties.sh"
fi;

echo "Disabling compression filter"
sed -i -e "s/<compression_filter_enabled>.*<\/compression_filter_enabled>/<compression_filter_enabled>false<\/compression_filter_enabled>/" /opt/tomcat/webapps/da/wdk/app.xml

if [[ -z $DA_EXT_CONF ]]
then
	DA_EXT_CONF="/opt/tomcat/webapps/da/external-configurations"
fi;

if [[ -d $DA_EXT_CONF ]]
then
	echo "Directory $DA_EXT_CONF exists"
else
	mkdir $DA_EXT_CONF
	chmod 755 $DA_EXT_CONF
fi;

echo "Initializing DA with given defaults ..."
    
if [ -f  ${DA_EXT_CONF}/app.xml ]
then
    cp ${DA_EXT_CONF}/app.xml /opt/tomcat/webapps/da/wdk/app.xml 
else 
	cp /opt/tomcat/webapps/da/wdk/app.xml ${DA_EXT_CONF}
fi;

if [ -f  ${DA_EXT_CONF}/dfc.properties ]
then
    cp ${DA_EXT_CONF}/dfc.properties /opt/tomcat/webapps/da/WEB-INF/classes/dfc.properties 
else 
	cp /opt/tomcat/webapps/da/WEB-INF/classes/dfc.properties ${DA_EXT_CONF}
fi;

if [ -f  ${DA_EXT_CONF}/otdsoauth.properties ]
then
    cp ${DA_EXT_CONF}/otdsoauth.properties /opt/tomcat/webapps/da/WEB-INF/classes/com/documentum/web/formext/session/otdsoauth.properties
else 
	cp /opt/tomcat/webapps/da/WEB-INF/classes/com/documentum/web/formext/session/otdsoauth.properties ${DA_EXT_CONF}
fi;

    
echo "Starting volume monitoring for app.xml ..."
./volmon.sh -s ${DA_EXT_CONF}/app.xml -d /opt/tomcat/webapps/da/wdk/app.xml >> /volmon-app-xml.log &

echo "Starting volume monitoring for otdsoauth.properties ..."
./volmon.sh -s ${DA_EXT_CONF}/otdsoauth.properties -d /opt/tomcat/webapps/da/WEB-INF/classes/com/documentum/web/formext/session/otdsoauth.properties >> /volmon-otdsoauth.log &

echo "Set catalina.properties for white space error and enable fips mode"


cd /opt/tomcat/conf
echo "Set catalina.properties for white space error and enable fips mode"

WHITESPACE_ENTRY_AVAILABLE=`grep -w org.apache.jasper.compiler.Parser.STRICT_WHITESPACE=false /opt/tomcat/conf/catalina.properties`

FIPSMODE_ENTRY_AVAILABLE=`grep -w jnlp.com.rsa.cryptoj.fips140loader=true /opt/tomcat/conf/catalina.properties`

if [[ $WHITESPACE_ENTRY_AVAILABLE == "" ]]
then
    sed -i '$ a\org.apache.jasper.compiler.Parser.STRICT_WHITESPACE=false' /opt/tomcat/conf/catalina.properties
fi;

if [[ $FIPSMODE_ENTRY_AVAILABLE == "" ]]
then
   sed -i '$ a\jnlp.com.rsa.cryptoj.fips140loader=true' /opt/tomcat/conf/catalina.properties
fi;


set -x
pid=0
# SIGTERM-handler
term_handler() {
  if [ $pid -ne 0 ]; then
    kill -SIGTERM "$pid"
    wait "$pid"
  fi;
  exit 143; # 128 + 15 -- SIGTERM
}

# setup handlers
# on callback, kill the last background process, which is `tail -f /dev/null` and execute the specified handler
trap 'kill ${!}; term_handler' SIGTERM
# Run application


echo "Starting the appserver"

$CATALINA_HOME/bin/startup.sh run &
pid="$!"

rm -rf /tmp/*
echo "DA installation is completed"

# wait forever
while true
do
  tail -f /dev/null & wait ${!}
done;